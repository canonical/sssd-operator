# Copyright 2023-2024 Canonical Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[tox]
minversion = 4.0.0
skipsdist=True
sitepackages = False
skip_missing_interpreters = True
envlist = fmt, lint, typecheck, unit

[vars]
src_path = {toxinidir}/src/
tst_path = {toxinidir}/tests
all_path = {[vars]src_path} {[vars]tst_path}

[testenv]
setenv =
    PYTHONPATH = {toxinidir}:{toxinidir}/lib:{[vars]src_path}
    PYTHONBREAKPOINT=ipdb.set_trace
    PY_COLORS=1
passenv =
    PYTHONPATH

[testenv:fmt]
description = Apply coding style standards to code
deps =
    black
    ruff
commands =
    black {[vars]all_path}
    ruff check --fix {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    black
    codespell
    ruff
commands =
    black --check --diff {[vars]all_path}
    codespell {toxinidir}
    ruff check {[vars]all_path}

[testenv:typecheck]
description = Run static type checker on code
deps =
    pyright
    -r{toxinidir}/requirements.txt
commands =
    pyright

[testenv:unit]
description = Run unit tests.
deps =
    ops[testing]==2.17.1
    pyfakefs==5.7.4
    pytest
    coverage[toml]
    pydantic
    jsonschema
    -r{toxinidir}/requirements.txt
commands =
    # Since tests are collected together by `pytest`, which means that all the import
    # statements will be executed together, the charm unit tests are run separately
    # from the utility module unit tests. The charm unit tests use a mocked `sssd` module
    # that will bork `sssd` module tests if they are all collected together rather than
    # run in isolated pytest processes.
    coverage run --parallel-mode \
        --source={[vars]src_path} \
        -m pytest -v --tb native -s \
        {posargs} {[vars]tst_path}/unit/test_charm.py
    coverage run --parallel-mode \
        --source={[vars]src_path} \
        -m pytest -v --tb native -s --ignore-glob *charm.py \
        {posargs} {[vars]tst_path}/unit/
    coverage combine
    coverage report

[testenv:integration]
description = Run integration tests
deps =
    juju
    pytest==8.3.4
    pytest-operator==0.39.0
commands =
    pytest -v \
        -s \
        --tb native \
        --log-cli-level=INFO \
        {[vars]tst_path}/integration \
        {posargs}

[testenv:generate-token]
description = Generate a Charmhub token to publish SSSD charm
allowlist_externals =
    /snap/bin/charmcraft
commands =
    charmcraft login \
        --export .charmhub.secret \
        --permission=package-manage-metadata \
        --permission=package-manage-releases \
        --permission=package-manage-revisions \
        --permission=package-view-metadata \
        --permission=package-view-releases \
        --permission=package-view-revisions \
        --ttl=31536000  # 365 days
